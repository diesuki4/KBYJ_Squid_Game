using System;

public class FontToBit
{
    private int[,,] fontData = new int[,,]
        {
        {{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },// Code  char  
        {{ 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20 } },// Code  char !
        {{ 0x50, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00 } },// Code  char "
        {{ 0x50, 0x50, 0xf8, 0x50, 0xf8, 0x50, 0x0A } },// Code  char #
        {{ 0x20, 0x78, 0x80, 0x70, 0x08, 0xf0, 0x20} }, // Code  char $
        {{ 0xc8, 0xc8, 0x10, 0x20, 0x40, 0x98, 0x98} }, // Code  char %
        {{0x60, 0x90, 0x80, 0x78, 0x90, 0x90, 0x60} },  // Code  char &
        {{0x10, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00} },  // Code  char '
        {{0x10, 0x20, 0x40, 0x40, 0x40, 0x20, 0x10} },  // Code  char (
        {{0x40, 0x20, 0x10, 0x10, 0x10, 0x20, 0x40} },  // Code  char )
        {{0x00, 0xa8, 0x70, 0x20, 0x70, 0xa8, 0x00} },  // Code  char *
        {{0x00, 0x20, 0x20, 0xf8, 0x20, 0x20, 0x00} },  // Code  char +
        {{0x00, 0x00, 0x00, 0x60, 0x60, 0x20, 0x40} },  // Code  char ,
        {{0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00} },  // Code  char -
        {{0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60} },  // Code  char .
        {{0x10, 0x10, 0x20, 0x20, 0x20, 0x40, 0x40} },  // Code  char /
        {{0x70, 0x88, 0xc8, 0xa8, 0x98, 0x88, 0x70} },  // Code  char 0
        {{0x20, 0x60, 0x20, 0x20, 0x20, 0x20, 0x70} },  // Code  char 1
        {{0x70, 0x88, 0x08, 0x10, 0x20, 0x40, 0xf8} },  // Code  char 2
        {{0xf8, 0x08, 0x10, 0x30, 0x08, 0x88, 0x70} },  // Code  char 3
        {{0x10, 0x30, 0x50, 0x90, 0xf8, 0x10, 0x10} },  // Code  char 4
        {{0xf8, 0x80, 0xf0, 0x08, 0x08, 0x88, 0x70} },  // Code  char 5
        {{0x30, 0x40, 0x80, 0xf0, 0x88, 0x88, 0x70} },  // Code  char 6
        {{0xf8, 0x08, 0x10, 0x20, 0x20, 0x20, 0x20} },  // Code  char 7
        {{0x70, 0x88, 0x88, 0x70, 0x88, 0x88, 0x70} },  // Code  char 8
        {{0x70, 0x88, 0x88, 0x78, 0x08, 0x10, 0x60} },  // Code  char 9
        {{0x00, 0x60, 0x60, 0x00, 0x60, 0x60, 0x00} },  // Code  char :
        {{0x60, 0x60, 0x00, 0x60, 0x60, 0x20, 0x40} },  // Code  char ;
        {{0x10, 0x20, 0x40, 0x80, 0x40, 0x20, 0x10} },  // Code  char <
        {{0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00} },  // Code  char =
        {{0x80, 0x40, 0x20, 0x10, 0x20, 0x40, 0x80} },  // Code  char >
        {{0x70, 0x88, 0x08, 0x10, 0x20, 0x00, 0x20} },  // Code  char ?
        {{0x70, 0x88, 0xa8, 0xd8, 0xb0, 0x80, 0x70} },  // Code  char @
        {{0x20, 0x50, 0x88, 0x88, 0xf8, 0x88, 0x88} },  // Code  char A
        {{0xf0, 0x88, 0x88, 0xf0, 0x88, 0x88, 0xf0} },  // Code  char B
        {{0x70, 0x88, 0x80, 0x80, 0x80, 0x88, 0x70} },  // Code  char C
        {{0xe0, 0x90, 0x88, 0x88, 0x88, 0x90, 0xe0} },  // Code  char D
        {{0xf8, 0x80, 0x80, 0xf0, 0x80, 0x80, 0xf8} },  // Code  char E
        {{0xf8, 0x80, 0x80, 0xf0, 0x80, 0x80, 0x80} },  // Code  char F
        {{0x70, 0x88, 0x80, 0xb8, 0x88, 0x88, 0x78} },  // Code  char G
        {{0x88, 0x88, 0x88, 0xf8, 0x88, 0x88, 0x88} },  // Code  char H
        {{0x70, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70} },  // Code  char I
        {{0x08, 0x08, 0x08, 0x08, 0x88, 0x88, 0x70} },  // Code  char J
        {{0x88, 0x90, 0xa0, 0xc0, 0xa0, 0x90, 0x88} },  // Code  char K
        {{0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xf8} },  // Code  char L
        {{0x88, 0xd8, 0xa8, 0xa8, 0x88, 0x88, 0x88} },  // Code  char M
        {{0x88, 0x88, 0xc8, 0xa8, 0x98, 0x88, 0x88} },  // Code  char N
        {{0x70, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70} },  // Code  char O
        {{0xf0, 0x88, 0x88, 0x88, 0xf0, 0x80, 0x80} },  // Code  char P
        {{0x70, 0x88, 0x88, 0x88, 0xa8, 0x98, 0x78} },  // Code  char Q
        {{0xf0, 0x88, 0x88, 0xf0, 0xa0, 0x90, 0x88} },  // Code  char R
        {{0x70, 0x88, 0x80, 0x70, 0x08, 0x88, 0x70} },  // Code  char S
        {{0xf8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20} },  // Code  char T
        {{0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70} },  // Code  char U
        {{0x88, 0x88, 0x88, 0x88, 0x88, 0x50, 0x20} },  // Code  char V
        {{0x88, 0x88, 0x88, 0xa8, 0xa8, 0xa8, 0x50} },  // Code  char W
        {{0x88, 0x88, 0x50, 0x20, 0x50, 0x88, 0x88} },  // Code  char X
        {{0x88, 0x88, 0x88, 0x50, 0x20, 0x20, 0x20} },  // Code  char Y
        {{0xf8, 0x08, 0x10, 0x20, 0x40, 0x80, 0xf8} },  // Code  char Z
        {{0x70, 0x40, 0x40, 0x40, 0x40, 0x40, 0x70} },  // Code  char [
        {{0x40, 0x40, 0x20, 0x20, 0x20, 0x10, 0x10} },  // Code  char BackSlash
        {{0x70, 0x10, 0x10, 0x10, 0x10, 0x10, 0x70} },  // Code  char ]
        {{0x20, 0x50, 0x88, 0x00, 0x00, 0x00, 0x00} },  // Code  char ^
        {{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8} },  // Code  char _
        {{0x40, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00} },  // Code  char `
        {{0x00, 0x00, 0x70, 0x88, 0x88, 0x98, 0x68} },  // Code  char a
        {{0x80, 0x80, 0xb0, 0xc8, 0x88, 0x88, 0xf0} },  // Code  char b
        {{0x00, 0x00, 0x70, 0x88, 0x80, 0x80, 0x70} },  // Code  char c
        {{0x08, 0x08, 0x68, 0x98, 0x88, 0x88, 0x78} },  // Code  char d
        {{0x00, 0x00, 0x70, 0x88, 0xf8, 0x80, 0x70} },  // Code  char e
        {{0x30, 0x40, 0xe0, 0x40, 0x40, 0x40, 0x40} },  // Code  char f
        {{0x78, 0x88, 0x88, 0x98, 0x68, 0x08, 0x70} },  // Code  char g
        {{0x80, 0x80, 0xb0, 0xc8, 0x88, 0x88, 0x88} },  // Code  char h
        {{0x20, 0x00, 0x60, 0x20, 0x20, 0x20, 0x70} },  // Code  char i
        {{0x10, 0x00, 0x30, 0x10, 0x10, 0x10, 0x60} },  // Code  char j
        {{0x80, 0x80, 0x88, 0x90, 0xa0, 0xd0, 0x88} },  // Code  char k
        {{0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x20} },  // Code  char l
        {{0x00, 0x00, 0xd0, 0xa8, 0xa8, 0xa8, 0xa8} },  // Code  char m
        {{0x00, 0x00, 0xb0, 0xc8, 0x88, 0x88, 0x88} },  // Code  char n
        {{0x00, 0x00, 0x70, 0x88, 0x88, 0x88, 0x70} },  // Code  char o
        {{0xf0, 0x88, 0x88, 0xc8, 0xb0, 0x80, 0x80} },  // Code  char p
        {{0x78, 0x88, 0x88, 0x98, 0x68, 0x08, 0x08} },  // Code  char q
        {{0x00, 0x00, 0xa0, 0xd0, 0x80, 0x80, 0x80} },  // Code  char r
        {{0x00, 0x00, 0x70, 0x80, 0x70, 0x08, 0xf0} },  // Code  char s
        {{0x40, 0x40, 0xf0, 0x40, 0x40, 0x40, 0x30} },  // Code  char t
        {{0x00, 0x00, 0x88, 0x88, 0x88, 0x98, 0x68} },  // Code  char u
        {{0x00, 0x00, 0x88, 0x88, 0x88, 0x50, 0x20} },  // Code  char v
        {{0x00, 0x00, 0xa8, 0xa8, 0xa8, 0xa8, 0x50} },  // Code  char w
        {{0x00, 0x00, 0x88, 0x50, 0x20, 0x50, 0x88} },  // Code  char x
        {{0x88, 0x88, 0x88, 0x98, 0x68, 0x08, 0x70} },  // Code  char y
        {{0x00, 0x00, 0xf8, 0x10, 0x20, 0x40, 0xf8} },  // Code  char z
        {{0x10, 0x20, 0x20, 0x40, 0x20, 0x20, 0x10} },  // Code  char {
        {{0x20, 0x20, 0x20, 0x00, 0x20, 0x20, 0x20} },  // Code  char |
        {{0x40, 0x20, 0x20, 0x10, 0x20, 0x20, 0x40} },  // Code  char }
        {{0x00, 0x00, 0x48, 0xb0, 0x00, 0x00, 0x00} },  // Code  char ~
        {{0x70, 0x50, 0x50, 0x50, 0x50, 0x50, 0x70} }   // Code char 

        };
    public int FontData => fontData[index, 0, bitindex];

    private int index;
    private int bitindex;

    public FontToBit(char letter, int bitindex)
    {
        this.index = letter - 32; 
        this.bitindex = bitindex;
    }

    public string CreateBitLine(int countHorSpace)
    {
        string binstr = Convert.ToString(FontData, 2);

        int zeroCounter = (8 + countHorSpace) - binstr.Length;
        string zeroString = "";
        for (int i = 0; i < zeroCounter; i++)
        {
            zeroString += "0";
        }
        return zeroString + binstr;
    }
}

